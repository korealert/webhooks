{
  "name": "rollbar",
  "description": "A standalone (Node.js) client for Rollbar",
  "homepage": "http://rollbar.com/docs/items_node/",
  "keywords": [
    "rollbar",
    "exception",
    "uncaughtException",
    "error",
    "ratchetio",
    "ratchet"
  ],
  "version": "0.4.4",
  "repository": {
    "type": "git",
    "url": "git://github.com/rollbar/node_rollbar.git"
  },
  "author": {
    "name": "Rollbar, Inc.",
    "email": "support@rollbar.com"
  },
  "license": "MIT",
  "main": "rollbar",
  "scripts": {
    "test": "vows --spec test/*"
  },
  "engines": {
    "node": ">= 0.6.0"
  },
  "dependencies": {
    "node-uuid": "1.4.x",
    "lru-cache": "~2.2.1",
    "json-stringify-safe": "~5.0.0"
  },
  "devDependencies": {
    "express": "*",
    "jade": "~0.27.7",
    "vows": "~0.7.0"
  },
  "readme": "# Rollbar notifier for Node.js [![Build Status](https://secure.travis-ci.org/rollbar/node_rollbar.png?branch=master)](https://travis-ci.org/rollbar/node_rollbar)\n\n<!-- RemoveNext -->\nNode.js library for reporting exceptions and other messages to [Rollbar](https://rollbar.com). Requires a Rollbar account.\n\n<!-- Sub:[TOC] -->\n\n## Quick start\n\n```js\n// include and initialize the rollbar library with your access token\nvar rollbar = require(\"rollbar\");\nrollbar.init(\"POST_SERVER_ITEM_ACCESS_TOKEN\");\n\n// record a generic message and send to rollbar\nrollbar.reportMessage(\"Hello world!\");\n\n// more is required to automatically detect and report errors.\n// keep reading for details.\n```\n\n<!-- RemoveNextIfProject -->\nBe sure to replace ```POST_SERVER_ITEM_ACCESS_TOKEN``` with your project's ```post_server_item``` access token, which you can find in the Rollbar.com interface.\n\n## Installation\n\nInstall using the node package manager, npm:\n\n    $ npm install --save rollbar\n\n\n## Configuration\n\n### Using Express\n\n```js\nvar express = require('express');\nvar rollbar = require('rollbar');\n\nvar app = express();\n\napp.get('/', function(req, res) {\n  // ...\n});\n\n// Use the rollbar error handler to send exceptions to your rollbar account\napp.use(rollbar.errorHandler('POST_SERVER_ITEM_ACCESS_TOKEN'));\n\napp.listen(6943);\n```\n\n\n### Standalone\n\nIn your main application, require and initialize using your access_token::\n\n```js\nvar rollbar = require(\"rollbar\");\nrollbar.init(\"POST_SERVER_ITEM_ACCESS_TOKEN\");\n```\n    \nOther options can be passed into the init() function using a second parameter. E.g.:\n\n```js\n// Queue up and report messages/exceptions to rollbar every 5 seconds\nrollbar.init(\"POST_SERVER_ITEM_ACCESS_TOKEN\", {handler: \"setInterval\", handlerInterval: 5});\n```\n\nWhen you are finished using rollbar, clean up any remaining items in the queue using the shutdown function:\n\n```js\nrollbar.shutdown();\n```\n\n\n## Usage\n\n### Uncaught exceptions\n\nRollbar can be registered as a handler for any uncaught exceptions in your Node process:\n\n```js\nvar options = {\n  // Call process.exit(1) when an uncaught exception occurs but after reporting all\n  // pending errors to Rollbar.\n  //\n  // Default: true\n  exitOnUncaughtException: true\n};\nrollbar.handleUncaughtExceptions(\"POST_SERVER_ITEM_ACCESS_TOKEN\", options);\n```\n\n### Caught exceptions\n\nTo report an exception that you have caught, use [`handleError`](https://github.com/rollbar/node_rollbar/blob/master/rollbar.js#L152) or the full-powered [`handleErrorWithPayloadData`](https://github.com/rollbar/node_rollbar/blob/master/rollbar.js#L176):\n\n```js\nvar rollbar = require('rollbar');\nrollbar.init('POST_SERVER_ITEM_ACCESS_TOKEN');\n\ntry {\n  someCode();\n} catch (e) {\n  rollbar.handleError(e);\n  \n  // if you have a request object (or a function that returns one), pass it as the second arg\n  // see below for details about what the request object is expected to be\n  rollbar.handleError(e, request);\n  \n  // you can also pass a callback, which will be called upon success/failure\n  rollbar.handleError(e, function(err2) {\n    if (err2) {\n      // an error occurred\n    } else {\n      // success\n    }\n  });\n  \n  // if you have a request and a callback, pass the callback last\n  rollbar.handleError(e, request, callback);\n\n  // to specify payload options - like extra data, or the level - use handleErrorWithPayloadData\n  rollbar.handleErrorWithPayloadData(e, {level: \"warning\", custom: {someKey: \"arbitrary value\"}});\n\n  // can also take request and callback, like handleError:\n  rollbar.handleErrorWithPayloadData(e, {level: \"info\"}, request);\n  rollbar.handleErrorWithPayloadData(e, {level: \"info\"}, callback);\n  rollbar.handleErrorWithPayloadData(e, {level: \"info\"}, request, callback);\n}\n```\n\n### Log messages\n\nTo report a string message, possibly along with additional context, use [`reportMessage`](https://github.com/rollbar/node_rollbar/blob/master/rollbar.js#L103) or the full-powered [`reportMessageWithPayloadData`](https://github.com/rollbar/node_rollbar/blob/master/rollbar.js#L129).\n\n```js\nvar rollbar = require('rollbar');\nrollbar.init('POST_SERVER_ITEM_ACCESS_TOKEN');\n\n// reports a string message at the default severity level (\"error\")\nrollbar.reportMessage(\"Timeout connecting to database\");\n\n\n// reports a string message at the level \"info\", along with a request and callback\n// only the first param is required\n// valid severity levels: \"critical\", \"error\", \"warning\", \"info\", \"debug\"\nrollbar.reportMessage(\"Response time exceeded threshold of 1s\", \"warning\", request, callback);\n\n// reports a string message along with additional data conforming to the Rollbar API Schema\n// documented here: https://rollbar.com/docs/api/items_post/\n// only the first two params are required\nrollbar.reportMessageWithPayloadData(\"Response time exceeded threshold of 1s\", {\n    level: \"warning\",\n    custom: {\n      threshold: 1,\n      timeElapsed: 2.3\n    }\n  }, request, callback);\n```\n\n### The Request Object\n\nIf your Node.js application is responding to web requests, you can send data about the current request along with each report to Rollbar. This will allow you to replay requests, track events by browser, IP address, and much more.\n\n`handleError`, `reportMessage`, `handleErrorWithPayloadData`, and `reportMessageWithPayloadData` all accept a `request` parameter as the second, third, third, and third arguments respectively. If it is a function, it will be called and the result used.\n\nIf you're using Express, just pass the express request object. If you're using something custom, pass an object with these keys (all optional):\n\n- `headers`: an object containing the request headers\n- `protocol`: the request protocol (e.g. `\"https\"`)\n- `url`: the URL starting after the domain name (e.g. `\"/index.html?foo=bar\"`)\n- `method`: the request method (e.g. `\"GET\"`)\n- `body`: the request body as a string\n- `route`: an object containing a 'path' key, which will be used as the \"context\" for the event (e.g. `{path: \"home/index\"}`)\n\nSensitive param names will be scrubbed from the request body and, if `scrubHeaders` is configured, headers. See the `scrubFields` and `scrubHeaders` configuration options for details.\n\n### Person Tracking\n\nIf your application has authenticated users, you can track which user (\"person\" in Rollbar parlance) was associated with each event.\n\nIf you're using the [Passport](http://passportjs.org/) authentication library, this will happen automatically when you pass the request object (which will have \"user\" attached). Otherwise, attach one of these keys to the `request` object described in the previous section:\n\n- `rollbar_person` or `user`: an object like `{id: \"123\", username: \"foo\", email: \"foo@example.com\"}`. id is required, others are optional.\n- `user_id`: the user id as an integer or string, or a function which when called will return the user id\n\nNote: in Rollbar, the `id` is used to uniquely identify a person; `email` and `username` are supplemental and will be overwritten whenever a new value is received for an existing `id`. The `id` is a string up to 40 characters long.\n\n\n## Configuration reference\n\n`rollbar.init(\"access token\", optionsObj)` takes the following configuration options:\n\n  <dl>\n  <dt>batchSize</dt>\n  <dd>The max number of items sent to rollbar at a time.\n\nDefault: `10`\n  </dd>\n  \n  <dt>branch</dt>\n  <dd>The branch in your version control system for this code.\n\ne.g. `'master'`\n  </dd>\n  \n  <dt>codeVersion</dt>\n  <dd>The version or revision of your code.\n\ne.g. `'868ff435d6a480929103452e5ebe8671c5c89f77'`\n  </dd>\n  \n  <dt>endpoint</dt>\n  <dd>The rollbar API base url.\n\nDefault: `'https://api.rollbar.com/api/1/'`\n  </dd>\n  \n  <dt>environment</dt>\n  <dd>The environment the code is running in, e.g. \"production\"\n\nDefault: `'unspecified'`\n  </dd>\n  \n  <dt>handler</dt>\n  <dd>The method that the notifier will use to report exceptions.\n  Supported values:\n\n- setInterval -- all items that are queued up are sent to rollbar in batches in a setInterval callback\n  - NOTE: using this mode will mean that items are queued internally before being sent. For applications that send a very large amount of items, it is possible to use up too much memory and crash the node process. If this starts to happen, try lowering the handlerInterval setting or switch to a different handler, e.g. 'nextTick'.\n- nextTick -- all items that are queued up are sent to rollbar in a process.nextTick callback\n- inline -- items are sent to rollbar as they are queued up, one at-a-time\n\nDefault: `inline`\n  </dd>\n  \n  <dt>handlerInterval</dt>\n  <dd>If the handler is `setInterval`, this is the number of seconds between batch posts of items to rollbar.\n\nDefault: `3`\n  </dd>\n  \n  <dt>host</dt>\n  <dd>The hostname of the server the node.js process is running on.\n\nDefault: hostname returned from `os.hostname()`\n  </dd>\n\n  <dt>root</dt>\n  <dd>The path to your code, (not including any trailing slash) which will be used to link source files on Rollbar.\n\ne.g. `'/Users/bob/Development'`\n  </dd>\n  \n  <dt>scrubFields</dt>\n  <dd>List of field names to scrub out of the request body (POST params). Values will be replaced with asterisks. If overriding, make sure to list all fields you want to scrub, not just fields you want to add to the default. Param names are converted to lowercase before comparing against the scrub list.\n\nDefault: `['passwd', 'password', 'secret', 'confirm_password', 'password_confirmation']`\n  </dd>\n  \n  <dt>scrubHeaders</dt>\n  <dd>List of header names to scrub out of the request headers. Works like scrubFields.\n  \nDefault: `[]`\n  </dd>\n  \n  <dt>verbose</dt>\n  <dd>Sets whether or not to log extra info/debug messages\n  \nDefault: `true`\n  </dd>\n  </dl>\n\n\n## Examples\n\nSee the [examples](https://github.com/rollbar/node_rollbar/tree/master/examples) directory for more use cases.\n\n## Performance\n\nThe default configuration uses the `inline` handler which will cause errors to be reported to Rollbar at the time they occur. This works well for small applications but can quickly become a problem for high-throughput apps. For better performance, the `setInterval` handler is recommended since it queues up errors before sending them.\n\nWhen using a handler besides `inline`, you should make sure to call `rollbar.shutdown()` in order to flush all errors before exiting.\n\n## Help / Support\n\nIf you have any questions, feedback, etc., drop us a line at support@rollbar.com\n\nFor bug reports, please [open an issue on GitHub](https://github.com/rollbar/node_rollbar/issues).\n\n## Contributing\n\nThe project is hosted on [GitHub](https://github.com/rollbar/node_rollbar). If you'd like to contribute a change:\n\n1. Fork it\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Added some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\nWe're using [vows](http://vowsjs.org/) for testing. To run the tests, run: `vows --spec test/*`\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/rollbar/node_rollbar/issues"
  },
  "_id": "rollbar@0.4.4",
  "dist": {
    "shasum": "06f3aad8321f0b8991820b98e2f7de9d7534b1b6"
  },
  "_from": "rollbar@",
  "_resolved": "https://registry.npmjs.org/rollbar/-/rollbar-0.4.4.tgz"
}
