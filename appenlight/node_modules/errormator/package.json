{
  "author": {
    "name": "LoÃ¯c Faure-Lacroix",
    "email": "lamerstar@gmail.com",
    "url": "http://blog.vosnax.ru"
  },
  "contributors": [],
  "name": "errormator",
  "description": "Node.js client for errormator.com",
  "version": "0.0.6",
  "homepage": "https://github.com/llacroix/errormatorjs",
  "repository": {
    "type": "git",
    "url": "git@github.com:llacroix/errormatorjs.git"
  },
  "main": "./errormator",
  "engines": {
    "node": "*"
  },
  "scripts": {},
  "dependencies": {},
  "devDependencies": {
    "coffee": ""
  },
  "optionalDependencies": {},
  "license": "MIT",
  "readme": "Errormatorjs\n============\n\nNon official https://errormator.com/ API implementation for NodeJS\n\n#### Installing\n\nThe project is still not present in NPM but you can install it or add it in your package.json with the\ngithub url.\n\n    npm install git://github.com/llacroix/errormatorjs.git\n\n\n#### Example with restify\n\n    restify = require(\"restify\")\n\n    reporter = new Errormator({\n        api_key: \"Your key\"\n    })\n\n    server = restify.createServer({\n            name: \"Test errormator\",\n            version: \"1.0.0\"\n    })\n\n    # Config the reporter\n    reporter.restify(server, {})\n\n    # More restify configuration like (server.use)\n    server.use(restify.requestLogger({}))\n    server.use(restify.authorizationParser())\n    server.use(restify.bodyParser({mapParams: false }))\n\n    server.get \"/fun\", (req, res, next) ->\n        # Should not raise an error\n        res.send({ok: true})\n\n    server.get \"/no_fun\", (req, res, next) ->\n        # Will raise an error\n        null.undefinedFunction()\n        res.send({ok: false})\n\n\n#### TODOS\n\n- Split the project in multiple files to make it easier for everyone\n- Refactor Reporters and Reports. It should be possible to create reports without looking at the whole structure. Reports can then be pushed to a pool. Once the pool is full or there is nothing to do, we can then push it back to the server (errormator)\n\nNeeds a base class to \"prevent\" duplication of code. Make all reports behave alike and push them into a pool\n\n- Make an integration for connect/expressjs\n- Make reporters lazy. They currently sends reports whenever something has to be reported. There should be a way to wait for some times to gather as much as possible reports and to log something under the 75kb limit. This will reduce processing time of small requests.\n\n#### Changelog 7/19/2013\n\n- Added a verbose/logger config. Logger is used to log some messages to the application. Useful for debugging. The verbose parameter will activate/deactivate the logger\n\n#### Changelog 7/15/2013\n\n- Add slow requests reporter\n\n#### Changelog 7/14/2013\n\n- Made an integration with restify\n\nExample:\n\n    // create server\n    reporter = new Errormator({api_key: \"...\"})\n    reporter.restify(server, config)\n\n#### Changelog 7/13/2013:\n\n- Can create report errors\n- Can log to errormator\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/llacroix/errormatorjs/issues"
  },
  "_id": "errormator@0.0.6",
  "dist": {
    "shasum": "552a629b085f01aa0765433a21c4f79d5f60aea2"
  },
  "_resolved": "git://github.com/llacroix/errormatorjs.git#e2b93f8468e04d34c1cc6d4ef930b02842328d79",
  "_from": "git://github.com/llacroix/errormatorjs.git"
}
