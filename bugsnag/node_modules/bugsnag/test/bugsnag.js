// Generated by CoffeeScript 1.8.0
(function() {
  var Bugsnag, Notification, apiKey, deliverStub, domain, should, sinon;

  domain = require("domain");

  should = require("chai").should();

  sinon = require("sinon");

  Bugsnag = require("../");

  Notification = require("../lib/notification");

  apiKey = null;

  deliverStub = null;

  before(function() {
    apiKey = "71ab53572c7b45316fb894d496f2e11d";
    return Bugsnag.register(apiKey, {
      notifyReleaseStages: ["production", "development"]
    });
  });

  describe("Bugsnag", function() {
    beforeEach(function() {
      return deliverStub = sinon.stub(Notification.prototype, "deliver");
    });
    afterEach(function() {
      return Notification.prototype.deliver.restore();
    });
    it("should call deliver when notifying a caught error", function() {
      var e;
      try {
        throw new Error("This is the message");
      } catch (_error) {
        e = _error;
        Bugsnag.notify(e);
      }
      return deliverStub.calledOnce.should.equal(true);
    });
    it("should call deliver when notifying an event emitter error", function() {
      var eventEmitter;
      eventEmitter = new (require('events').EventEmitter)();
      eventEmitter.on("error", Bugsnag.notify);
      eventEmitter.emit("error", "Something went wrong");
      return deliverStub.calledOnce.should.equal(true);
    });
    return it("should call deliver when notifying with a domain, using event emitter", function() {
      var mainDomain;
      mainDomain = domain.create();
      mainDomain.on("error", Bugsnag.notify);
      mainDomain.run(function() {
        var eventEmitter;
        eventEmitter = new (require('events').EventEmitter)();
        return eventEmitter.emit("error", new Error("Something went wrong"));
      });
      return deliverStub.calledOnce.should.equal(true);
    });
  });

  describe("Bugsnag", function() {
    return describe("Notification.deliver", function() {
      it("should call the callback after notifying bugsnag", function(done) {
        return Bugsnag.notify("error message", done);
      });
      return it("should call callback when releaseStage isnt configured in notifyReleaseStages", function(done) {
        var oldNotifyReleaseStagesValue;
        oldNotifyReleaseStagesValue = Bugsnag.notifyReleaseStages;
        Bugsnag.notifyReleaseStages = ["production"];
        Bugsnag.notify("This is the message", done);
        return Bugsnag.notifyReleaseStages = oldNotifyReleaseStagesValue;
      });
    });
  });

}).call(this);
